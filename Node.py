#
# this function creates a node
# generate a node in the network with a random space
import matplotlib.pyplot as plt
import numpy as np
from ParameterConfig import *
from DirectionalPacket import DirectionalPacket
from BroadcastingPacket import BroadcastingPacket
from Allocation import *

class myNode:
    def __init__(self, id, x, y, period):
        self.ID = id
        self.period = period
        self.HopCount = 0

        self.x = x
        self.y = y
        self.ChildSet = [] # list of child nodes
        self.ParentSet = [] # list of parent nodes
        self.ParentFreSet = {} # dictionary to store frequencies corresponding to each ParentNode

        # LoRa parameters the node used to send packets      
        self.sf = 7
        self.bw = 125
        self.cf = 868000000
        self.tp = 14
        
        self.JoinReqSet = [] # list of JoinReq packets sent by the node
        self.JoinConfirmSet = [] # list of JoinReq packets sent by the node
        self.packet = None # packet generated by node each time period
        self.dist = None

        self.sent = 0

    
    # node generate "virtul" packets for each gateway
    def Generate_Packet(self, Target):
        self.packet = None

        self.dist = get_distance(self.x,self.y,Target) # distance between node and gateway
        
        PacketPara = LoRaParameters()
        if allocation_method == "random":
                PacketPara.sf,PacketPara.bw,PacketPara.cf = random_allocation()
        
        self.sf = PacketPara.sf
        self.bw = PacketPara.bw
        self.cf = PacketPara.cf 
        self.packet = DirectionalPacket(self.id, Target.id, PacketPara, self.dist)
        # print('node %d' %id, "x", self.x, "y", self.y, "dist: ", self.dist, "my BS:", self.bs.id)

    def Generate_AskJoin(self):
        self.packet = None
        
        PacketPara = LoRaParameters()
        
        PacketPara.sf = self.sf
        PacketPara.bw = self.bw
        PacketPara.cf = self.cf
        PacketPara.tp = self.tp
        self.packet = BroadcastingPacket(self.ID, PacketPara)
    
    def Generate_JoinReq(self):
        self.JoinReqSet = []
        
        PacketPara = LoRaParameters()
        
        PacketPara.sf = self.sf
        PacketPara.bw = self.bw
        PacketPara.cf = self.cf
        PacketPara.tp = self.tp
        
        for ParentNode in self.ParentSet:
            self.dist = get_distance(self.x, self.y, ParentNode)
            self.JoinReqSet.append(DirectionalPacket(self.ID, ParentNode.ID, PacketPara, self.dist))
            
    def Generate_JoinConfirm(self):
        self.JoinConfirmSet = []
        
        PacketPara = LoRaParameters()
        
        PacketPara.sf = self.sf
        PacketPara.bw = self.bw
        PacketPara.cf = self.cf
        PacketPara.tp = self.tp
        
        for index, ChildNode in enumerate(self.ChildSet):
            self.dist = get_distance(self.x, self.y, ChildNode)
            PacketPara.cf = Carrier_Frequency[index % len(Carrier_Frequency)]  # Cycle through frequencies
            self.JoinConfirmSet.append(DirectionalPacket(self.ID, ChildNode.ID, PacketPara, self.dist))
    
 
#   directional antenna
#   update RSSI depending on direction
#

def get_distance(x,y,Target):
     dist = np.sqrt((x-Target.x)*(x-Target.x)+(y-Target.y)*(y-Target.y)) # distance between node and gateway
     return dist

